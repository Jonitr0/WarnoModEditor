# Generated from NdfGrammar.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,210,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,
        1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
        1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,209,8,38,0,0,39,1,0,
        3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,25,0,27,0,29,
        0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,1,55,
        2,57,3,59,4,61,5,63,6,65,7,67,8,69,9,71,10,73,11,75,12,77,13,1,0,
        26,2,0,65,65,97,97,2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,
        100,2,0,69,69,101,101,2,0,70,70,102,102,2,0,71,71,103,103,2,0,72,
        72,104,104,2,0,73,73,105,105,2,0,74,74,106,106,2,0,75,75,107,107,
        2,0,76,76,108,108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,
        111,111,2,0,80,80,112,112,2,0,81,81,113,113,2,0,82,82,114,114,2,
        0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,2,0,86,86,118,
        118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,2,0,90,
        90,122,122,184,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,
        0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,
        0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,
        1,0,0,0,23,101,1,0,0,0,25,103,1,0,0,0,27,105,1,0,0,0,29,107,1,0,
        0,0,31,109,1,0,0,0,33,111,1,0,0,0,35,113,1,0,0,0,37,115,1,0,0,0,
        39,117,1,0,0,0,41,119,1,0,0,0,43,121,1,0,0,0,45,123,1,0,0,0,47,125,
        1,0,0,0,49,127,1,0,0,0,51,129,1,0,0,0,53,131,1,0,0,0,55,138,1,0,
        0,0,57,141,1,0,0,0,59,150,1,0,0,0,61,157,1,0,0,0,63,161,1,0,0,0,
        65,169,1,0,0,0,67,173,1,0,0,0,69,180,1,0,0,0,71,185,1,0,0,0,73,191,
        1,0,0,0,75,195,1,0,0,0,77,208,1,0,0,0,79,80,7,0,0,0,80,2,1,0,0,0,
        81,82,7,1,0,0,82,4,1,0,0,0,83,84,7,2,0,0,84,6,1,0,0,0,85,86,7,3,
        0,0,86,8,1,0,0,0,87,88,7,4,0,0,88,10,1,0,0,0,89,90,7,5,0,0,90,12,
        1,0,0,0,91,92,7,6,0,0,92,14,1,0,0,0,93,94,7,7,0,0,94,16,1,0,0,0,
        95,96,7,8,0,0,96,18,1,0,0,0,97,98,7,9,0,0,98,20,1,0,0,0,99,100,7,
        10,0,0,100,22,1,0,0,0,101,102,7,11,0,0,102,24,1,0,0,0,103,104,7,
        12,0,0,104,26,1,0,0,0,105,106,7,13,0,0,106,28,1,0,0,0,107,108,7,
        14,0,0,108,30,1,0,0,0,109,110,7,15,0,0,110,32,1,0,0,0,111,112,7,
        16,0,0,112,34,1,0,0,0,113,114,7,17,0,0,114,36,1,0,0,0,115,116,7,
        18,0,0,116,38,1,0,0,0,117,118,7,19,0,0,118,40,1,0,0,0,119,120,7,
        20,0,0,120,42,1,0,0,0,121,122,7,21,0,0,122,44,1,0,0,0,123,124,7,
        22,0,0,124,46,1,0,0,0,125,126,7,23,0,0,126,48,1,0,0,0,127,128,7,
        24,0,0,128,50,1,0,0,0,129,130,7,25,0,0,130,52,1,0,0,0,131,132,3,
        9,4,0,132,133,3,47,23,0,133,134,3,31,15,0,134,135,3,29,14,0,135,
        136,3,35,17,0,136,137,3,39,19,0,137,54,1,0,0,0,138,139,3,17,8,0,
        139,140,3,37,18,0,140,56,1,0,0,0,141,142,3,39,19,0,142,143,3,9,4,
        0,143,144,3,25,12,0,144,145,3,31,15,0,145,146,3,23,11,0,146,147,
        3,1,0,0,147,148,3,39,19,0,148,149,3,9,4,0,149,58,1,0,0,0,150,151,
        3,41,20,0,151,152,3,27,13,0,152,153,3,1,0,0,153,154,3,25,12,0,154,
        155,3,9,4,0,155,156,3,7,3,0,156,60,1,0,0,0,157,158,3,27,13,0,158,
        159,3,17,8,0,159,160,3,23,11,0,160,62,1,0,0,0,161,162,3,31,15,0,
        162,163,3,35,17,0,163,164,3,17,8,0,164,165,3,43,21,0,165,166,3,1,
        0,0,166,167,3,39,19,0,167,168,3,9,4,0,168,64,1,0,0,0,169,170,3,17,
        8,0,170,171,3,27,13,0,171,172,3,39,19,0,172,66,1,0,0,0,173,174,3,
        37,18,0,174,175,3,39,19,0,175,176,3,35,17,0,176,177,3,17,8,0,177,
        178,3,27,13,0,178,179,3,13,6,0,179,68,1,0,0,0,180,181,3,39,19,0,
        181,182,3,35,17,0,182,183,3,41,20,0,183,184,3,9,4,0,184,70,1,0,0,
        0,185,186,3,11,5,0,186,187,3,1,0,0,187,188,3,23,11,0,188,189,3,37,
        18,0,189,190,3,9,4,0,190,72,1,0,0,0,191,192,3,7,3,0,192,193,3,17,
        8,0,193,194,3,43,21,0,194,74,1,0,0,0,195,196,3,25,12,0,196,197,3,
        1,0,0,197,198,3,31,15,0,198,76,1,0,0,0,199,200,5,116,0,0,200,201,
        5,114,0,0,201,202,5,117,0,0,202,209,5,101,0,0,203,204,5,102,0,0,
        204,205,5,97,0,0,205,206,5,108,0,0,206,207,5,115,0,0,207,209,5,101,
        0,0,208,199,1,0,0,0,208,203,1,0,0,0,209,78,1,0,0,0,2,0,208,0
    ]

class NdfGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    K_EXPORT = 1
    K_IS = 2
    K_TEMPLATE = 3
    K_UNNAMED = 4
    K_NIL = 5
    K_PRIVATE = 6
    K_INT = 7
    K_STRING = 8
    K_TRUE = 9
    K_FALSE = 10
    K_DIV = 11
    K_MAP = 12
    T_BOOLEAN = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "K_EXPORT", "K_IS", "K_TEMPLATE", "K_UNNAMED", "K_NIL", "K_PRIVATE", 
            "K_INT", "K_STRING", "K_TRUE", "K_FALSE", "K_DIV", "K_MAP", 
            "T_BOOLEAN" ]

    ruleNames = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
                  "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", 
                  "W", "X", "Y", "Z", "K_EXPORT", "K_IS", "K_TEMPLATE", 
                  "K_UNNAMED", "K_NIL", "K_PRIVATE", "K_INT", "K_STRING", 
                  "K_TRUE", "K_FALSE", "K_DIV", "K_MAP", "T_BOOLEAN" ]

    grammarFileName = "NdfGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



# Generated from NdfGrammar.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,6,176,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,
        1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
        9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
        1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,4,28,130,8,28,11,28,12,28,131,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,142,8,29,10,29,12,29,145,
        9,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,154,8,29,10,29,12,29,
        157,9,29,1,29,3,29,160,8,29,1,30,3,30,163,8,30,1,30,4,30,166,8,30,
        11,30,12,30,167,1,31,1,31,1,31,4,31,173,8,31,11,31,12,31,174,2,143,
        155,0,32,1,0,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,
        25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,
        51,0,53,1,55,2,57,3,59,4,61,5,63,6,1,0,29,2,0,65,65,97,97,2,0,66,
        66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,
        70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,
        105,2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,
        77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,
        2,0,81,81,113,113,2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,
        116,116,2,0,85,85,117,117,2,0,86,86,118,118,2,0,87,87,119,119,2,
        0,88,88,120,120,2,0,89,89,121,121,2,0,90,90,122,122,3,0,9,10,13,
        13,32,32,1,0,48,57,2,0,48,57,97,102,160,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,
        0,3,67,1,0,0,0,5,69,1,0,0,0,7,71,1,0,0,0,9,73,1,0,0,0,11,75,1,0,
        0,0,13,77,1,0,0,0,15,79,1,0,0,0,17,81,1,0,0,0,19,83,1,0,0,0,21,85,
        1,0,0,0,23,87,1,0,0,0,25,89,1,0,0,0,27,91,1,0,0,0,29,93,1,0,0,0,
        31,95,1,0,0,0,33,97,1,0,0,0,35,99,1,0,0,0,37,101,1,0,0,0,39,103,
        1,0,0,0,41,105,1,0,0,0,43,107,1,0,0,0,45,109,1,0,0,0,47,111,1,0,
        0,0,49,113,1,0,0,0,51,115,1,0,0,0,53,117,1,0,0,0,55,122,1,0,0,0,
        57,129,1,0,0,0,59,159,1,0,0,0,61,162,1,0,0,0,63,169,1,0,0,0,65,66,
        7,0,0,0,66,2,1,0,0,0,67,68,7,1,0,0,68,4,1,0,0,0,69,70,7,2,0,0,70,
        6,1,0,0,0,71,72,7,3,0,0,72,8,1,0,0,0,73,74,7,4,0,0,74,10,1,0,0,0,
        75,76,7,5,0,0,76,12,1,0,0,0,77,78,7,6,0,0,78,14,1,0,0,0,79,80,7,
        7,0,0,80,16,1,0,0,0,81,82,7,8,0,0,82,18,1,0,0,0,83,84,7,9,0,0,84,
        20,1,0,0,0,85,86,7,10,0,0,86,22,1,0,0,0,87,88,7,11,0,0,88,24,1,0,
        0,0,89,90,7,12,0,0,90,26,1,0,0,0,91,92,7,13,0,0,92,28,1,0,0,0,93,
        94,7,14,0,0,94,30,1,0,0,0,95,96,7,15,0,0,96,32,1,0,0,0,97,98,7,16,
        0,0,98,34,1,0,0,0,99,100,7,17,0,0,100,36,1,0,0,0,101,102,7,18,0,
        0,102,38,1,0,0,0,103,104,7,19,0,0,104,40,1,0,0,0,105,106,7,20,0,
        0,106,42,1,0,0,0,107,108,7,21,0,0,108,44,1,0,0,0,109,110,7,22,0,
        0,110,46,1,0,0,0,111,112,7,23,0,0,112,48,1,0,0,0,113,114,7,24,0,
        0,114,50,1,0,0,0,115,116,7,25,0,0,116,52,1,0,0,0,117,118,3,39,19,
        0,118,119,3,35,17,0,119,120,3,41,20,0,120,121,3,9,4,0,121,54,1,0,
        0,0,122,123,3,11,5,0,123,124,3,1,0,0,124,125,3,23,11,0,125,126,3,
        37,18,0,126,127,3,9,4,0,127,56,1,0,0,0,128,130,7,26,0,0,129,128,
        1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,133,
        1,0,0,0,133,134,6,28,0,0,134,58,1,0,0,0,135,143,5,34,0,0,136,137,
        5,92,0,0,137,142,5,34,0,0,138,139,5,92,0,0,139,142,5,39,0,0,140,
        142,9,0,0,0,141,136,1,0,0,0,141,138,1,0,0,0,141,140,1,0,0,0,142,
        145,1,0,0,0,143,144,1,0,0,0,143,141,1,0,0,0,144,146,1,0,0,0,145,
        143,1,0,0,0,146,160,5,34,0,0,147,155,5,39,0,0,148,149,5,92,0,0,149,
        154,5,34,0,0,150,151,5,92,0,0,151,154,5,39,0,0,152,154,9,0,0,0,153,
        148,1,0,0,0,153,150,1,0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,
        156,1,0,0,0,155,153,1,0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,
        160,5,39,0,0,159,135,1,0,0,0,159,147,1,0,0,0,160,60,1,0,0,0,161,
        163,5,45,0,0,162,161,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,
        166,7,27,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,
        168,1,0,0,0,168,62,1,0,0,0,169,170,5,48,0,0,170,172,3,47,23,0,171,
        173,7,28,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,
        175,1,0,0,0,175,64,1,0,0,0,10,0,131,141,143,153,155,159,162,167,
        174,1,6,0,0
    ]

class NdfGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    K_TRUE = 1
    K_FALSE = 2
    WS = 3
    STRING = 4
    INT = 5
    HEXNUMBER = 6

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "K_TRUE", "K_FALSE", "WS", "STRING", "INT", "HEXNUMBER" ]

    ruleNames = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", 
                  "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", 
                  "W", "X", "Y", "Z", "K_TRUE", "K_FALSE", "WS", "STRING", 
                  "INT", "HEXNUMBER" ]

    grammarFileName = "NdfGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


